CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(100) NOT NULL
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100) NOT NULL,
    CategoryID INT,
    Price DECIMAL(10, 2),
    StockQuantity INT,
    Popularity INT DEFAULT 0,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(100) NOT NULL,
    Email VARCHAR(100),
    Phone VARCHAR(15)
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
INSERT INTO Categories (CategoryID, CategoryName) VALUES (1, 'Electronics'), (2, 'Books');
INSERT INTO Products (ProductID, ProductName, CategoryID, Price, StockQuantity) 
VALUES 
(1, 'Laptop', 1, 1000.00, 10),
(2, 'Smartphone', 1, 600.00, 15),
(3, 'Programming Book', 2, 30.00, 50);
INSERT INTO Customers (CustomerID, CustomerName, Email, Phone) 
VALUES 
(1, 'Alice', 'alice@example.com', '123-456-7890'),
(2, 'Bob', 'bob@example.com', '098-765-4321');

INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) 
VALUES 
(1, 1, '2024-09-01', 1030.00),
(2, 2, '2024-09-02', 600.00);

INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity) 
VALUES 
(1, 1, 1, 1),  
(2, 1, 3, 1),  
(3, 2, 2, 1);  
SELECT * FROM Products
WHERE CategoryID = 1;  
UPDATE Products
SET StockQuantity = StockQuantity - 1
WHERE ProductID = 1;  
DELETE FROM Products
WHERE StockQuantity = 0;
SELECT * FROM Orders
WHERE CustomerID = 1;  
SELECT * FROM Products
WHERE Price BETWEEN 50 AND 1000 AND StockQuantity > 0;

SELECT * FROM Products
ORDER BY Price ASC;


SELECT * FROM Products
ORDER BY Popularity DESC;
SELECT AVG(TotalAmount) AS AverageOrderValue FROM Orders;
SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders
FROM Orders
GROUP BY CustomerID;
